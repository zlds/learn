应用告警:
	- 准确率
	- 覆盖率
	- 及时性

怎样将devops和业务价值关联起来?以表明devops对业务价值的拉动和贡献？

配置管理: 对流程进行规范、控制变更过程、让协作更加顺畅。

版本变更标准:
    版本来源于变更
	对软件而言、最核心的资产就是源代码。

	核心记录: 谁、在什么时间、做了什么改变、具体改了那些内容、又是谁批准的

将一切纳入版本控制: 软件源代码、配置文件、测试编译脚本、流水线配置、环境配置、数据库配置变更等。

核心: 任何变更都可能会带来问题、所以、全程版本控制、这样的好处是对于定位问题和修复问题都是非常重要的。

单一可信源:
	- 对代码来说、要有统一的版本控制、不能让代码满天飞
	- 对于版本来说、要有统一的渠道、不能让人随便本地打个包就传上去了
	- 对于开发依赖的组件来说、要有统一的来源、不能让来路不明的组件直接集成到系统中。


CI: (Continuous Integration) 持续集成
	- 顾名思义、这里面有两个关键的问题: 集成什么东西? 为什么要持续？ 
	- 尽早发现问题、构建失败、质量不达标、测试不通过、代码规约静态扫描等不符合标准。

	- CI 是一种软件开发实践、团队成员频繁地将他们的工作成果集成到一起(通常每人每天至少提交一次、这样每天就会多次集成、并且在每次提交后、自动触发运行一次包含自动化验证集的构建任务、以便尽早发现集成问题。

	验证CI:
		- 每一次代码提交、是否都会触发一次完整的流水线?
		- 每次流水线是否会自动化的测试环节？
		- 如果流水线出现了问题、是否能够在10分钟之内修复?
	CI的三个阶段:
		- 第一阶段: 快速集成。每次变更都会触发CI。	并通过事件、或者webhook的方式通知持续集成平台。
			1、统一分支策略: 需要一条以集成为目的的分支。
			2、清晰的集成规则: 对于不同的分支、集成的目的也是不一样的。如研发特性分支、目的主要是快速验证和反馈、这个层面的持续集成、主要以验证打包和代码质量为主。而对于系统集成来说、验证和代码质量。	
		- 第二个阶段: 每次流水线触发自动化测试。		

		- 第三个阶段: 出了问题可以在第一时间修复。意思是说: 出现错误、比如10分钟内没有修复则自动回滚代码

极限编程: ExtremeProgramming 简称XP
	- 顾名思义、极限编程是一种软件开发方法、作为敏捷开发的方法之一、目的在于通过缩短开发周期、提高发布频率来提升软件质量、改善用户需求响应速度。














