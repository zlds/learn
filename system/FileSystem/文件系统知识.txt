文件系统: 是对存储设备上的文件、进行组织管理的机制。组织方式不同、就会形成不同的文件系统。

索引节点
	简称inode、用来记录文件的元数据、比如inode编号、文件大小、访问权限、修改日期、数据的位置等
目录项
	- 不仅是是目录、还可以表示文件.
	- 简称dentry、用来记录文件的名字、索引节点指针以及与其他目录项的关联关系。
	- 目录项是由内核维护的一个数据结构、不存放于磁盘、而是缓存在内存。如果查询目录频繁从磁盘读、效率会很低、所以内核会把已经读过的目录用目录项这个数据结构缓存在内存、下次读相同目录时、只需要从磁盘空间读就可以了、大大提高了文件系统的效率。


VFS 四个主要数据结构:
- 超级块、存储整个文件系统的状态。如文件系统的名称、大小和状态、元数据信息。
- 索引节点区、记录了文件的元数据
- 数据块区、则用来存储文件数据
- 目录项、文件系统的目录结构。记录了文件的名字、以及文件与其他目录项之间的目录关系


逻辑块: 是由连续磁盘扇区构成的最小读单元、用来存储文件数据
超级块: 用来记录文件系统整体的状态、如索引节点和逻辑块的使用情况等

注: 目录项是一个内存缓存、而超级块、索引节点和逻辑块、都是存储在磁盘中的持久化数据。

VSF: 定义了一组所有文件系统都支持的数据结构和标准接口。这样、用户进程和内核中的其他子系统、只需要跟VFS提供的统一接口进行交换就可以了、而不需要再关系底层各种文件系统的实现细节。


IO分类:
- 直接IO、是指跳过操作系统的页缓存、直接跟文件系统交互来访问文件。
- 非直接IO、正好相反、文件读写时、先要经过系统的页缓存、然后再由内核或额外的系统调用、真正写入磁盘。

- 阻塞IO、是指应用程序执行IO操作后、然后没有获得响应、就会阻塞当前线程、等待IO响应。
- 非阻塞IO、是指应用程序执行IO操作后、不会阻塞当前的线程、可以继续执行其他的任务、随后在通过轮询或者事件通知的形式、获取调用的结果。

- 同步IO、是指应用程序执行IO操作后、要一直等到整个IO完成后、才能获得IO响应。
- 异步IO、是指应用程序执行IO操作后、不用等待完成和完成后的影响、而是继续执行就可以了。等到这次IO完成后、响应会用事件通知的方式、告诉应用程序。


通用块层:
	通用块层、其实是处在文件系统和磁盘驱动中间的一个块设备抽象层。
1、跟虚拟文件系统的功能类似。向上、为文件系统和应用程序、提供访问块设备的标准接口。向下、把各种异构的磁盘设备抽象为统一的块设备、并提供统一框架来管理这些设备的驱动程序。
2、通用块层还会给文件系统和应用程序发来的IO请求排队、并通过重新排序、请求合并等方式、提高磁盘读写的效率。	


IO调度器:
	- NOOP、是最简单的一种IO调度算法。它实际上是一个先入先出的队列、只做一些最基本的请求合并、常用于SSD磁盘
	- CFQ、完全公平调度器、是现在很多发行版的默认IO调度器、它为每个进程维护了一个IO调度队列、并按照时间片来均分每个进程的IO请求
	- DeadLine 分别为读、写请求创建了不同的I/O队列、可以提高机械磁盘的吞吐量、并确保达到最终期限的请求被优先处理。用在I/O压力比较重的场景、比如数据库等.




Linux存储系统的IO栈: 由上到下分为三个层次、分别是文件系统层、通用块层和设备层
	
	- 文件系统层: 包括虚拟文件系统和其他各种文件系统的具体实现。它为上层的应用程序、提供标准的文件访问接口、对下会通过通用块层、来存储和管理磁盘数据
	- 通用块层、包括块设备IO队列和IO调度器。它会对文件系统的IO请求进行排队、再通过重新排序和请求合并、然后才发送给下一级的设备层。
	- 设备层、包括存储设备和相应的驱动程序、负责最终物理设备的IO操作







磁盘性能指标:
	- 使用率、是指磁盘处理IO的时间百分比。过高的使用率(如80%)、通常意味着磁盘IO存在性能瓶颈。
	- 饱和度、是指磁盘处理IO的繁忙程度。过高的饱和度、意味着磁盘存在严重的性能瓶颈。当饱和度为100%时、磁盘无法接受新的IO请求。
	- IOPS(Input/Output Per Second)、是指每秒的IO请求数。
	- 吞吐量、是指每秒的IO请求大小
	- 响应时间、是指IO请求从发出到收到响应的间隔时间。


iostat -d -x 1 查看磁盘io使用情况:
	- IOPS
		- r/s 每秒发送给磁盘的读请求数  
		- w/s 每秒发送给磁盘的写请求数
	rkB/s 每秒从磁盘读取的数据量
	wkB/s 每秒向磁盘写入的数据量
	rrqm/s 每秒合并的读请求数
	wrqm/s 每秒合并的写请求数
	rawait 读请求处理完成等待时间
	wawait 写请求处理完成等待时间
	aqu-sz 平均请求队列长度
	rareq-sz 平均读请求大小
	wareq-sz 平均写请求大小
	svctm 处理IO请求所需要的平均时间(不包括等待时间)
	%util 磁盘处理IO的时间百分百


pidstat -d 1 查看进程使用IO情况:
用户ID
进程ID
每秒读取的数据大小
每秒发出的写请求数据大小
每秒取消的写请求数据大小
块IO延迟、包括等待同步块IO和换入块结束的时间、单位是时钟周期。

iotop 根据IO大小对进程排序


iostat tps 为每秒I/O操作数。

%iowait 用于度量CPU等待I/O操作完成时间的空闲时间百分比。





磁盘是可持久化存储的设备。

机械磁盘
	- 主要有盘片和读写磁头组成、数据就存储在盘片的环状磁道中。
	- 在读写数据前、需要移动读写磁头、定位到数据所在的磁道、然后才能访问数据。

固态磁盘
	- 由固态电子元器件组成。固态磁盘不需要磁道寻址、所以、不管是连续I/O、还是随机I/O的性能、都要比机械磁盘要好得多。

奇偶校验:
	- 当二进制数据被传输和处理时、数据可能会受到噪声的影响、从而使源数据如0变为1、而1变0。因此将奇偶校验添加到数据中、以便1的偶数或奇数变为1、从而去检查错误。

	- 如 1 1 1 0 0 1 0 1 把每个位相加(1+1+1+0+0+1+0+1=5)、结果为奇数。对于偶数校验位为1。cpu读取的时候在次进行相加、计算结果是否与校验位一致。


奇偶校验:  异或运算
	- 1 xor 1 = 0
	  1 xor 0 = 1
	  0 xor 1 = 1
	  0 xor 0 = 0
	- 如果有差异 结果为1 
	如果有2个1则奇偶校验和为0
	如果只有一个1、则奇偶校验为1
	1 1 为0
	1 0 为1
	0 1 为1
	00  为0


RAID 5
	- N-1
	- 兼顾对象速度和数据安全、只允许坏一块盘
	- 通过奇偶校验恢复数据、奇偶校验是额外的数据、数据写入硬盘时一起计算和存储。奇偶校验信息需要保留一些空间、这样才能帮助恢复丢失数据。

	优点:
		- 允许坏掉一个磁盘

	缺点:
		- 写入慢、因为需要为每个数据写入每个磁盘中。

	如 9 = X +4  假设X存储在坏掉的磁盘、4是存储在正常工作的磁盘、而9是存储在另外一个磁盘上的奇偶校验数据、该数据是刚开始储存数据说话的计算的、这个时候我们就可以算出X的值为9


RAID 10
	- 先创建RAID 1 然后在RAID1上创建RAID0

	- 优点安全性好、只要不是一个RAID1上的2块硬盘同事损坏、都不影响正常的读写。


	- 成本高、N-2
	- 写入性能较RAID01差一些



RAID 01
	- 先创建RAID0  然后在RAID0上创建RAID1
	- 优点
		写入速度快、读速度和RAID10一样

	- 缺点:
		成本高
		- 一旦其中一块磁盘挂掉之后、一半的硬盘无法正常工作。


















