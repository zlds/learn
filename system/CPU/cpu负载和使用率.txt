CPU
	运算器: 
		- 可以做加减乘除、还有与或等逻辑运算.
		- 简单的说就是负责运算从内存读取到寄存器中的数据、可以看作一个数据加工厂、就是对寄存器中的数据做运算。

		两种:
			- 算术逻辑单元 ALU 主要负责的就是对数据的处理、从而实现对数据的算术和逻辑运算


	- 寄存器:  CPU内部容量较小、速度很快的内存
			就是临时存放数据的小格子
			R1 R2 R3 R4


# top 命令、可以查看cpu负载和使用cpu最高的进程

 我们通常需要关注cpu的两项指标、平均负载和cpu使用率。

 平均负载:
 - 简单理解、平均负载、就是单位时间内平均活跃的进程数。而平均活跃的进程又包含:可运行(R状态Running或Runnable)和不可中断的进程(D状态Uninterruptible Sleep 也称为Disk Sleep)。
   可运行进程: 是指正在使用cpu或者是等待cpu的进程
   不可中断进程: 是说进程正处于内核态关键的流程中、并且这些流程是不能打断的、比如常见的是等待硬件设备的I/O响应。不可中断实际上是系统对硬件设备的一种保护机制。

   (和CPU使用率并没有直接关系)


平均负载注意事项:
	- 平均负载高可能是CPU密集型进程导致的
	- 平均负载高并一定代表CPU使用率高、还有可能是I/O更繁忙了
	- 当发现负载高的时候、可以使用mpstat  pidstat等工具、辅助分析负载的来源。


CPU使用率:
- 是指单位时间内CPU繁忙情况的统计。
- 非空闲运行的时间占比。
   


进程 vs 线程: 
	- 进程是运行的程序      线程是进程的一部分
	- 进程是资源分配的单位   线程是CPU调度的单位
	- 进程消耗资源比较多     线程消耗资源较少
	- 进程是隔离的          线程是共享内存的
	- 进程创建花费时间过长   线程创建比较轻量


CPU 物理核与逻辑核:
	- 一块CPU芯片可能包含多个物理核、每个物理核都是一个实打实的运算核心(包括运算器、存储器等)
	- 超线程(Hyper-Threading)技术可以让一个物理核在单位时间内同时处理两个线程、变成两个逻辑核。


池化技术优势:
	- 降低资源消耗: 通过池化技术重复利用已创建的线程、降低线程创建和销毁的损耗
	- 提高响应速度: 任务到达时、无需等待线程创建即可立即执行。
	- 提高线程的可管理性: 线程是稀缺资源、如果无限制创建、不仅会消耗系统资源、还会因为线程的不合理分布导致资源调度失衡、降低系统的稳定性。

SMP 对称多处理系统
	- 所有的CPU共享如总线、内存和I/O系统等。多个CPU之间没有区别平等地访问内存、外设、一个操作系统.

	缺点:
		1、扩展性差、每个共享都可能导致SMP服务器扩展出现瓶颈。如内存总线.
		2、如果两个处理器同时访问同一段资源、则硬件和软件锁定机制可以解决资源争用问题。
		 
MPP 大规模并行处理
	- 无共享、其中每个处理器都可以独占访问内存、I/O


NUMA 非一致性内存访问

	多个cpu模块组成，每个cpu都有自己的独立本地内存，I/O插槽

	缺点:
		单节点的内存容量有限，而访问远程内存延迟远远超过本地内存。当cpu数量增加时系统性能无法线性增加。


NUMA与MPP
	numa共享是在单台服务上，而MPP是通过节点网络共享。















