开发环境:  开发日常需要的开发验证、联调
测试环境:  开发在自己的环境验证通过后、部署到测试环境、交由测试
预发环境:  线上真实数据环境、不对外开放
beta环境: 灰度发布或者说金丝雀发布、抽取一定比例对外开发
生产环境:


回归测试:
   在对系统现有的功能及非功能进行改进、打补丁或者是配置更改等变更后力求发现新的bug、叫作回归。
   是说确保已修复的变更不会再次引入bug。

A/B测试和金丝雀测试的区别:
  在于A/B测试的目的是新业务上线带来的效果是怎么样的、确定那个版本执行的更好。
  如: 一个推荐产品的新算法可以增加收入、或者用户界面更可以带来更多的点击量


版本控制:
  核心功能是: 
     能够识别源代码不同的版本
     不同开发人员之间共享代码修改  
     记录从一个版本到下一个版本之间谁做了修改、记录修改的范围。


瀑布式:  项目化
   要求每一个开发阶段都要做到最好。特别是前期阶段、设计的越完美、提交后的成本损失就越少。

迭代: 版本化
   不要求每一个阶段的任务做的都是最完美的、而是明明知道还有很多不足的地方、却偏偏不去完善它、而是把主要功能先搭起来为目的。以最低的时间、最少的损失去完成一个"不完美的成果物"直至提交

可预测性: 6.18 双十一
不可预测性: 微博热点事件


容量评估: 要对系统容量的水位心中有数、特别是核心链路。容量评估需要完善的自动化压测系统、对单接口、单应用、单链路、全链路进行压测

技术选型: 
   因为技术选型决定后续系统实现的难度以及稳定性、需要根据团队成员的知识结构以及技术的掌握难度、社区活跃程度等慎重选择。
   首要的就是稳定性与可用性、新技术可以从边缘模块进行尝试、成熟之后在核心系统使用。 

稳定性:

  定义SLA(SLA指标) > 高可用方案(高可用能力) > 测试验证(故障模拟) > 监控响应(关键指标)

  验证: 
    架构review发现冗余问题。
    故障注入.
  

   开发阶段:
      测试用例
      code review
      日志
      监控接口
      功能开关
   上线阶段:
      必须所有的测试用例通过。
      变更通知、通知相关人、以便及早发现问题
      灰度
   故障阶段:
      优先恢复服务、回滚服务
      故障恢复后在追查原因。
      事后总结、完善。


监控的目的:
  无非是为了了解服务运行状况、发现服务故障和帮助定位故障原因



限流降级: 保证在承诺容量范围内系统可用。对于超出容量的请求进行限流、
         如何判断是否要限流呢？这时我们要看系统的各项指标、常见的指标有CPU Load、QPS、连接数等等.
         同时对于非核心的功能、在峰值时刻进行降级、以降低系统压力。

限流: 它的作用是根据某个应用或基础部件的某些核心指标、如QPS或并发线程数、来决定是否将后续的请求进行拦截.
限流方案: 
        第一类: 接入层限流: Nginx限流(nginx_http_limit_con_module) 2、API路由网关模式
        第二类: 应用限流
        第三类: 基础服务限流(主要针对数据库、缓存以及消息等基础服务组件的限流而设定)

限流算法:
   计数器
     一般我们会限制在一秒钟的能够通过的请求数、比如限流QPS为100、算法的实现思路就是从第一个请求进来开始计时、在接下去的1s内、每来一个请求、就把计数器加1、如果累计加的数字达到了100、那么后续的请求就会被全部拒绝。等到1s结束后、把计数恢复成0、重新开始计数。

   漏桶算法:
     把请求比作是水、水来了都先放进桶里、并以限定的速度出水、当水来的过猛而出水不够快时就会导致直接溢出、即拒绝服务。
     漏斗有一个进水口和一个出水口、出水口以一定速率出水、并且有一个大出水速率:
       如果进水率小于等于最大出水速率、那么、出水速率等于进水速率、此时不会积水。
       如果进水速率大于出水速率、那么、漏斗以最大速率出水、此时、多余的水会积在漏斗中
     在算法实现方面、可以准备一个队列、用户保存请求、另外通过一个线程池定期从队列中获取请求并执行、可以一次性获取多少个并发执行。

     缺点: 无法应对短时间的突发流量。

   令牌桶算法:
    可以应对突发流量。
     令牌桶算法的原理: 是系统以恒定的速率产生令牌、然后把令牌放到令牌桶中、令牌桶有一个容量、当令牌桶满了的时候、再向其中放令牌、那么多余的令牌会被丢弃。
     当想要处理一个请求的时候、需要从令牌桶中取出一个令牌、如果此时令牌桶中没有令牌、那么则拒绝该请求。

     系统以固定的速度向木桶里面放token、然后请求从木桶里面获取token、只有获取到token、才能继续请求处理、如果没有获取到token则拒绝。
     如果一段时间内、没有请求进来、木桶里面就会积攒token、这样即使大流量进来、只要木桶里面的token足够、也能一次处理完、所以令牌桶支持突发流量。

令牌桶算法VS漏桶算法
   漏桶: 请求流入的速率不固定(有时快、有时慢)、但是所有的请求、都是按照固定的流出处理。一般情况下都是用在网络上的流量整流、也就是时不管你的请求流量多少、都是按照固定的速率流出
   令牌桶: 令牌桶是以固定的速度放入token、只要木桶的token足够、就能支持突发流量。不管流量有多少、只要有足够的token、就能一次处理完


降级: 它的作用是通过判断某个应用或组件的服务状态是否正常、来决定是否继续提供服务   


降级的目的是应对系统自身的故障、而熔断的目的是应对依赖的外部系统故障的情况


监控: 指标采集和统计、异常判断、都需要监控体系的支持.


容量规划: 就是对复杂的业务场景的分析、通过一定的技术手段(如压力测试)
         、来达到对资源合理扩容、有效规划的过程.  
         容量规划需要经验和数据的积累       
          

根据业务来推导:
             需要运营配合估算GMV目标收入、UV、PV、转化率、并且结合历年的峰值数据、然后进行评估、评估完之后、进行压测、
             构造压测的数据模型: 数据模型要接近真实场景(不同用户购物车的商品数量、优惠策略、不同渠道比例等)
                              数据量要接近真实场景、比如用户数量、商品数量、店铺数量、优惠券数量等等

压测粒度:
         单机单应用
         单链路压力测试: 如商品详情浏览链路、加购物车链路、订购下单链路等等
压测写数据: 对压测的写请求做专门的标记。当请求要写入数据库时、由分布式数据库的中间件框架中的逻辑来判断这个请求是否是压测请求、如果是压测写请求则路由到对应的影子库中、而不是直接写到线上正式的库中.



hystrix 熔断、把客户端的每一次服务调用用断路由器封装起来、通过断路由来监控每一次服务调用.
        滑动窗口: 默认情况下、滑动窗口包含10个桶、每个桶的宽度为1秒、每个桶内记录了这1秒内所有服务调用中的成功的、失败的、超时的以及被线程拒绝的次数。hystrix会取滑动窗口内所有服务调用的失败率作为断路由器开关状态的判断依据、这10个桶内记录的所有失败的、超时的、被线程拒绝的调用次数之和除以总的调用次数、就是滑动窗口内所有服务的调用的失败率。


微服务治理平台:
              注册中心(服务管理): 
                     服务上下线
                     节点添加/删除

              配置中心(服务治理):
                      调用配置中心提供的接口、动态地修改各种配置来实现服务的治理
                      限流
                      降级
                      切流量

              监控系统(服务监控)
                     整体监控: 比如服务依赖拓扑图、将整个系统内服务间的调用关系和依赖关系进行可视化的展示
                     具体服务监控: 比如服务的QPS、AvgTime、P999等监控指标

              服务追踪系统(问题定位)

              日志系统(日志查询)
              
              容器管理平台(服务运维)

容错:
  分布式系统通常有很多依赖、如果一个应用不能对依赖故障进行隔离、那么应用本身就处在被拖垮的风险中。将会导致应用资源被耗尽。


持续集成:
        本质需要自动化测试
        最重要的一点就是要推行单元测试、集成测试、还有系统测试、单测是保证自己没问题、集成测试是保证根上下游没问题、系统测试是保证整个系统没问题
  CI:
      快速正确打一个包出来

  CD(持续交付):
      能够快速把一个包在不同的环境验证它是OK的
      关键点的一点要解决: 环境一致性、配置一致性
  CD(持续部署):
      是一种能力、就是把一个包快速部署在你想要的地方



平均负载:  简单理解、平均负载其实就是平均活跃的进程数
     是指单位时间内、系统处于可运行状态和不可中断状态的平均进程数、也就是平均活跃的进程数、它和cpu使用率并没有直接关系
     可运行状态的进程: 是指正在使用CPU或者正在等待cpu的进程
    不可中断状态的进程则是正处于内核态关键流程中的进程、并且这些流程是不可能打断的、比如常见的是等待硬件设备的I/O响应。
    不可中断状态实际上是系统对进程和硬件设备的一种保护机制
CPU使用率:
    是指单位时间内cpu繁忙情况的统计
    I/O密集型、进程等待I/O也会导致平均负载升高、但cpu使用率不一定很高
    大量等待CPU的进程调度也会导致平均负载升高、此时的cpu使用率也会比较高

寄存器是CPU内部的容量较少但是速度很快的内存。寄存器通过对常用值(通常是运算的中间值)的快速访问来提高计算机程序运行的速度

程序计数器是记录cpu运行执行的位置、或下一条指令的位置

上下文切换:
      进程上下文切换、是指从一个进程切换到另一个进程运行

      而系统调用过程中一直是同一个进程在运行

      进程上下文切换:   在进程调度的时候、需要切换上下文

           进程可以在用户空间运行、又可以在内核空间中运行。在用户空间运行时、被称为进程的用户态、而陷入内核空间的时候、被称为进程的内核态。
           从用户态到内核态的转变、需要通过系统调用来完成
           进程的上下文不仅包括了虚拟内存、栈、全局变量等用户空间的资源、还包括了内核堆栈、寄存器等内核空间的状态
           保存当前进程的内核状态和cpu寄存器之前、需要先把该进程的虚拟内存、栈等保存下来、而加载了下一个进程的内核态后、还需要刷新进程的虚拟内存和用户栈

      线程上下文切换:
           同进程的线程、资源共享、如虚拟内存、全局变量等资源、这些在切换时不需要修改
           线程也有私有的数据、比如栈和寄存器等、这些在上下文切换时也是需要保存的

      中断上下文切换:
           中断处理会打断进程的正常调度和执行、转而调用中断处理程序、响应设备事件。
           中断处理不涉及到进程的用户态
           中断上下文其实只包括内核态中断服务程序执行所必需的状态、包括cpu寄存器、内核堆栈、硬件中断参数等
  
  自愿上下文切换:
       是指进程无法获取所需要资源、导致的上下文切换。如I/O、内存等系统资源不足时、就会发生自愿上下文切换
       自愿上下文切换变多了、说明进程都在等待资源、有可能发生了I/O等其他问题
  非自愿上下文切换:
      是指进程由于时间片已到等原因、被系统强制调度、进而发生的上下文切换。如大量进程都在争抢cpu时、就容易发生        
    中断处理比进程拥有更高级的优先级
    上下文切换需要几十纳秒到数微秒的cpu时间    

进程上下文切换过多、会将原本运行进程的CPU时间、消耗在寄存器、内核栈以及虚拟内存等数据的保存和恢复上


进程状态:
    R 处于Running或Runable的缩写、表示进程在CPU的就绪队列中、正在运行或者正在等待运行
    D 也就是不可中断状态睡眠、一般表示进程正在跟硬件交互、并且交互过程不允许被其他进程或中断打断。进程长时间处于不可中断状态、通常表示系统有I/O性能问题
    Z zombie的缩写、代表僵尸进程、也就是进程实际上已经结束了、但是父进程还没有回收它的资源(文件描述符、PID等)
    S 可中断状态睡眠、表示进程因为等待某个事件而被系统挂起。当进程等待的事件发生时、它会被唤醒并进入R状态
    I 也就是空闲状态、用在不可中断睡眠的内核线程上。
    s 表示这个进程是一个会话的领导进程
    + 表示前台进程组
    l 多线程
    N 低优先级
    < 高优先级
进程组: 表示一组相互关联的进程、比如每个子进程都是父进程所在组的成员
会话: 是指同一个终端的一个或多个进程组 

进程空间:
   程序段: 可执行文件代码的内存映射
   数据段: 已经初始化的全局变量的内存映射
   BSS段: 未初始化的全局变量或者静态变量
   堆区:  存储动态的内存分配、匿名的内存映射
   栈区:  进程用户空间栈、存放函数的参数值、局部变量的值等
   映射段: 文件的内存映射






stress Linux 系统压力测试工具
stressng i 1 hdd 1 timeout 600 模拟IO

sysbench 多线程基准测试工具
sysbench threads=10 maxtime=300 threads run 模拟上下文切换

perf record F 99 a g p 2667  sleep 30
perf record F 99 ag  sleep 60
perf script | ./stackcollapseperf.pl > out.perffolded
cat out.perffolded | ./flamegraph.pl > perfkernel.svg

dstat 查看磁盘和cpu
pidstat d 查看磁盘 p xxx.pid
strace 跟踪进程系统调用的工具 
hping3 是一个可以构造TCP/IP协议数据包的工具、可以对系统进行安全审计、防火墙测试等      
cachestat 提供了整个操作系统缓存的读写命中情况
cachetop 提供了每个进程的缓存命中情况
memleak 可以跟踪系统或指定进程的内存分配、释放请求、然后定期输出一个未释放内存和相应调用栈的汇总情况(默认5秒)

火焰图
# 使用perf记录性能数据
$ perf record a g  sleep 30

# 生成火焰图
$ perf script i perf.data | ./stackcollapseperf.pl all |  ./flamegraph.pl > ksoftirqd.svg

中断:  
 中断是系统用来响应硬件设备请求的一种机制、它会打断进程的正常调度和执行、然后调用内核中的中断处理程序来响应设备的请求
      其实是一种异步的事件处理机制、可以提高系统的并发处理能力。

为了解决中断处理程序执行过长和中断丢失的问题、Linux将中断处理过程分成了两个阶段
上半部:
    上半部用来快速处理中断、它在中断禁止模式下运行、主要处理跟硬件紧密相关的或时间敏感的工作

下半部:
    下半部用来延迟处理上半部未完成的工作、通常以内核线程的方式运行

     上半部直接处理硬件请求、也就是我们常说的硬中断、特点是快速执行
     而下半部则是由内核触发、也就是我们常说的软中断、特点是延迟执行

  以网卡为例:
     网卡接收到数据包后、会通过硬件中断的方式、通知内核有新的数据到了。这时内核就应该调用中断处理程序来响应它
     对上半部来说、既然是快速处理、其实就是要把网卡的数据读到内存中、然后更新一下硬件寄存器的状态(表示数据已经读好了)、最后在发送一个软中断信号、通知下半部进一步的处理。 
     下半部被软中断信号唤醒后、需要从内存中找到网络数据、在按照网络协议栈、对数据进行逐层解析和处理、直接把他发送给应用程序。

RSS: 
   是网卡的硬件特性、实现多队列、将不同的流分发到不同的cpu核上、同一流始终在同一cpu上、避免TCP的顺序性和cpu的并发性冲突。
   好处是将每个队列产生的中断分布到cpu的多个核心上、实现负载均衡、避免了单核cpu占用100%、而其他核空闲的情况

   查看网卡是否支持RSS ls /sys/class/net/eth0/queues/  如果是多队列网卡会看到多个rx和tx

RPS/RFS: 
   RSS需要网卡硬件的支持、在使用不支持RSS的网卡时、为了充分利用多核cpu、可以通过RPS/RFS实现。
   RPS可以将一个rx队列的软中断分发到多个cpu核上、从而达到负载均衡的目的。
   RFS是RPS的扩展、RPS只依靠hash来控制数据包、提供了好的负载平衡、但是它没有考虑应用程序的位置(指在哪个CPU上)。RFS则考虑到了应用程序的位置、好处是增加数据缓存的命中率


软中断: 包括网络收发、定时、调度、RCU锁等各种类型。而定时、调度、RCU锁都是系统自身保障正常运行必须的、所以软中断基本上是绝大部分网络收发引起的。    


内存:
    Linux内核给每个进程都提供了一个独立的虚拟地址空间、并且这个地址空间是连续。

    虚拟地址空间的内部又被分为内核空间和用户空间两部分、不同字长(也就是单个CPU指令可以处理数据的最大长度)的处理器、地址空间的范围也不同.

   内存映射: 将虚拟内存映射到物理内存。

  页表:  记录虚拟地址与物理地址的映射关系。内核为每个进程都维护了一张页表。
        页表实际上存储在cpu的内存管理单元MMU中。这样正常情况下、处理器就可以直接通过硬件、找出要访问的内存。
        



  多级页表: 多级页表就是把内存分成区块来管理、将原来的映射关系改成区块索引和区块内的偏移。


虚拟内存空间的分布:
    1.只读段、包括代码和常量
    2.数据段、包括全局变量等
    3.堆、包括动态分配的内存、从低地址开始向上增长
    4.文件映射段、包括动态库、共享内存等、从高地址开始向下增长
    5.栈、包括局部变量和函数调用的上下文等。栈的大小是固定的、一般是8MB
匿名页:
      应用程序动态分配的堆内存

Buffers:
    是对原始磁盘块的临时存储、也就是用来缓存磁盘的数据、通常不会特别大(20MB左右).这样内核就可以把分散的写集中起来、统一优化磁盘的写入、比如可以把多次小的写合并成单次大的写等等。

    既可以用作"将要写入磁盘数据的缓存"、也可以用作"从磁盘读取数据的缓存"

Cached:
    是从磁盘读取文件的页缓存、也就是用来缓存从文件读取的数据。实际上写文件时也会用到  

    既可以用作"从文件读取数据的页缓存"、也可以用作"写文件页的缓存"  

Buffer是对磁盘数据的缓存、而Cache是文件数据的缓存、它们即会用在读请求中、也会用在写请求中

磁盘:
    超级块、存储整个文件系统的状态
    索引节点区、用来存储索引节点
    数据块区、则用来存储文件数据
    
    目录项、记录了文件的名字、以及文件与其他目录项之间的项目关系

文件系统层:
          包括虚拟文件系统和其他各种文件系统的具体实现、它为上层的应用程序、提供标准的文件访问接口、对下会通过通用块层、来储存和管理磁盘数据
通用块层:
          包括块设备I/O队列和I/O调度器、它会对文件系统的I/O请求进行排队、再通过重新排序和请求合并  、然后才要发送给下一级的设备层
  向上、它为文件系统和应用程序、提供访问了块设备的标准接口、向下、把各种异构的磁盘设备、抽象为统一的块设备。
设备层:
          包括储存设备和相应的驱动程序、负责最终物理设备的I/O操作                      

磁盘性能指标:
  使用率: 是指磁盘处理I/O的时间百分比。过高的使用率(如超过80%)、通常意味着磁盘I/O存在性能瓶颈
  饱和度: 是指磁盘处理IO的繁忙程度。过高的饱和度、意味着磁盘存在严重的性能瓶颈.当饱和度为100%时、磁盘无法接受新的IO请求
  IOPS: 是指每秒的IO请求数
  响应时间: 是指IO请求从出发到收到响应的间隔时间



网络:
  当网络连接处于ESTABLISHED时
    RecvQ 表示套接字缓冲还没有被应用程序取走的字节数(即接收队列长度)
    SendQ 表示还没有被远端主机确认的字节数(即发送队列长度)
  当网络连接处于Listening时
    RecvQ表示syn backlog的当前值
    SendQ表示最大的syn backlog值

RSS: 多队列接收、它基于硬件的多个接收队列、来分配网络接收进程、这样可以让多个CPU来处理接收到的网络包


系统调用:
  是操作系统为用户态运行的进程与硬件设备(如CPU、磁盘、打印机等）进行交互提供的一组接口



USE
   Utility  CPU/内存/磁盘/网络利用率
   Saturation 各种队列长度/饱和度   如分布式队列
   Error  协议栈错误 应用层错误日志



DevOps:
   文化 流程 工具
充分利用工具实现自动化、但是更重要的是通过规范的流程、将整个工具链打通、使各个团队间更加高效地协同工作


AIOPS = AI + OPS + BigData 用数据加算法解决IT问题、代替传统运维
智能运维: 聚焦业务、提升业务运行稳定为主
传统运维: 保障系统各环节运行流畅、以快速解决问题为目标

异地多活:
  第一步: 业务分级
    按照一定的标准将业务进行分级、挑选出核心的业务、只为核心业务设计异地多活、降低方案整体复杂度和实现成本


在运行期间发现错误时需要的修复时间:
   如果部署后很快就就发现了错误、那么开发人员还有可以迅速诊断问题所需要的背景信息、而如果错误一开始是由IT人员诊断的、在把错误交给开发人员处理之前可能需要花费一些时间。


SaaS: Software as a Service 软件即服务
   用户能够使用运行在云基础设施上的供应商应用。 如电子邮件、客户关系管理

PaaS Platform as a Service  平台即服务
   用户能够向云基础设施中部署自建开发的程序。
   用户不能管理或控制底层的云基础设施、包括网络、服务器、操作系统或存储器。

IaaS Infrastructure as a Service 基础设施即服务
   底层设施、用户可自己控制处理器、内存、磁盘资源等。



故障处理流程:
  核心是尽快恢复服务到正常状态.
  
  通过JIRA处理流程:
    1、收到&确认故障
       创建故障JIRA工单
    2、通知故障协调人、并上报产品技术群/可用性保障群
    3、定位/处理故障。每半小时同步进展至协调人
    4、故障恢复
    5、提供简单故障原因分析
    6、组织故障Review



数据库连接池:
   最大连接数
     如果当前连接数小于连接数、则创建新的连接处理数据库请求
     如果连接池中有空闲连接则复用空闲连接
     如果空闲池中没有连接并且当前连接数小于最大连接数、则创建新的连接处理请求
     如果当前连接数已经大于等于最大连接数、则按照配置中设定的时间(C3P0的连接池配置是checkoutTimeout)等待旧的连接可用。

数据库分库分表有两种方式:
   垂直拆分: 
       顾名思义就是对数据库竖着拆分、也就是将数据库的表拆分到多个不同的数据库中
       原则一般是按照业务类型来拆分、核心思想是专库专用、将业务耦合多比较高的表拆分到单独的库中。

   水平拆分:
     垂直拆分的关注点在于业务相关性。而垂直拆分指的是将单一数据表按照某一些规则拆分到多个数据库和多个数据表中、关注点在数据。
     拆分的规则有两种:
       按照某一个字段的哈希值做拆分、这种规则比较适合用于实体表、比如说用户表、内容表、我们一般按照这些实体表的ID字段来拆分。比如说我们想把用户拆分成16个库、每个库是64张表、那么可以先对用户的id做哈希



FMEA 故障模式与影响分析
1.给出初始的架构分析图
2.假设某个组件发生故障
3.分析此故障对系统的影响
4.根据故障结果、分析系统是否需要优化。      