DDD是一种架构设计方法，微服务是一种架构风格，两者从本质上都是为了追求高的响应力。

DDD主要关注:
	从业务领域视角划分领域边界，构建通用语言进行高效沟通，通过业务抽象，建立领域模型，维持业务和代码的逻辑一致性。


核心概念
	1、领域: 代表业务的一个特定区域或范围。
	2、子域: 是将领域进一步细分，每个子域聚集于领域内的一个更具体的业务区域。通过细分领域可以更有效地管理复杂性，使问题更加具体和易于处理。
	3、核心域: 是公司产品核心竞争力的业务领域。通常是资源投入最集中的地方。比如有的公司核心域可能在客户服务，有的可能在物流。
	4、通用域: 包含了子域共用的通用功能，这些功能通常标准化程度高。如认证，权限。
	5、支撑域: 是那些必需但非核心的业务功能，通常用来支持核心域和通用域的运作。而支撑域则具有业务特性，但不具有通用性，如数据字典。



示例
	业务场景：在线零售
	主要业务领域：在线销售产品，包括服装、电子产品、家居用品等。

	领域是整个在线零售商品店。子域：商品管理，库存管理，订单处理、支付处理、顾客关系管理
	核心域是订单处理。通用域是支付处理。支撑域商品管理和库存管理。


限定上下文
	上下文边界

	商品商品
		核心功能: 搜索，查看商品详情
		限界上下文: 商品管理
		通用语言示例: 商品ID、商品描述、价格、库存.


聚合根
	

领域服务
	是聚合根自身无法完成业务逻辑时的代替品.


战略设计
	战略设计就是解决一个问题，那就是软件的模块划分的问题。






领域建模
	关注业务需求和业务连接的抽象。焦点是如何表示业务实体、值对象、聚合、服务等领域概念。

数据建模
	关注的是数据如何组织、存储和访问。关心的是数据在数据库中的存储，以及如何优化查询。





再传统的开发过程是拿到需求之后，就开始编码实现。在采用领域驱动的方式后，拿到需求以后应当先进行需求分析，设计领域模型。


什么是高质量的代码？
	低耦合，高内聚，以及各种设计原则。

	接地气的回答是：当用户提出一个需求变更时，为了实现这个变更而修改软件的成本越低，软件的设计质量就越高。



怎样才能在每次变更的时候都只修改一个模块就能实现新需求呢？
	需要平时不断整理代码，将因同一个原因而变更的代码放到一起。将不同原因而变更的代码放在不同的模块，不同的类中。


	实际上单一原则就是要求在维护软件的过程中需要不断的进行整理，将软件变化同一个原因的代码放在一起，将软件变化不同的原因的代码分开放。





服务
	标识的是在领域对象之外的操作与行为，接收用户的请求和执行某些操作。

	当用户在系统界面中进行操作时，会向系统发送请求。"服务"去接收用户的这些请求，然后根据需求去执行相应的方法，所有操作都完成后，再将实体或值对象中的数据持久化到数据库中。



实体
	通过一个唯一标识字段来区分真实世界中的每一个个体的领域对象。

值对象
	代表的是真实世界中那些一成不变的、本质性的事务，这样的领域对象叫作"值对象"



充血模型需要开发人员具有更强的OOA/D能力、分析业务、业务建模与设计能力。


领域模型的最终落地是三种类型的对象：服务、实体与值对象。

设计思路：贫血模型与充血模型。


将领域模型转换成程序设计主要分为三块：服务、实体、值对象。然后基于贫血、充血模式设计思路来设计。

领域驱动只适合增删改，不适合统计分析。我看到

聚合：
	表达的是真实世界中整体与部分的关系。如订单与订单明细，表单与表单明细，发票与发票明细。这样设计的好处当聚合内部逻辑发生变更时，只与聚合内部有关，外部并不需要修改，这样就降低了变更成本。

	限制：外部不能跳过整体去操作部分，对部分的操作必须通过整体。

聚合根：
	外部访问的唯一入口。


DDD的工厂
	DDD的工厂和设计模式工厂完全是不一样的。在设计模式中，将被调用方设计成一个接口下的多个实现，将这些实现放入工厂中，工厂负责通过key值找到对应的实现类，创建出来，返回给调用方从而降低了调用方与被调用方的耦合度。

	DDD工厂要做的事情是：当系统需要通过ID加载一个订单时，订单仓库将任务交给订单工厂，订单工厂分别调用订单DAO、订单明细DAO和用户DAO进行查询。将订单明细对象与用户对象，分别set到订单对象的"订单明细"与"用户"属性中。订单工厂将装配好的订单对象返回给订单仓库。

问题域和限界上下文
	假设现在我们要对一个电商平台进行领域驱动设计，这个领域包含了那么多场景，那么多的领域对象，每个领域对象还有复杂的关联关系，那我们该如何通过领域驱动来设计这个系统呢？

	具体的思路就是分而治之，将大问题拆分成一个个小问题。也就是说我们将整个系统划分多个独立的业务场景，然后对每个独立的场景进行领域分析与建模，这样的业务场景称之为"问题子域"，简称"子域"。

	领域驱动的核心设计思想：就是对软件的分析与设计还原到真实世界中。真实世界的业务与问题叫作"问题域"，业务规则与知识叫"业务领域知识"。

	如：
		1、电商平台的"问题域"，人们如何进行在线购物，购物的流程是怎样的。
		2、在线订餐系统的"问题域"，人们如何在线订餐，饭店如何在线接单，系统是如何派送骑士去配送的。
	基于此我们可以将他们划分不同的子域。
		1、电商平台：用户选购、下单、支付、物流等多个子域。
		2、在线订餐系统：用户下单、饭店接单、骑士派送等子域。

	一个复杂系统的领域驱动设计，是以子域为中心进行领域建模的，然后绘制出一张张的领域模型设计，称之为"限界上下文"




领域驱动设计是解决微服务如拆分，实现微服务的高内聚与单一职责的问题。


事件：
	在业务领域中那些已经发生的事件就是事实。



DDD指导微服务拆分
	- 按照限界上下文进行微服务的拆分，按照上下文地图定义各微服务之间的接口与调用关系。
	- 将领域模型划分到多个问题子域，每个子域都有一个领域模型的设计。
	- 基于充血模型与贫血模型设计各个微服务的业务领域层，即各自的Service、Entity与Value Object
	- 按照领域模型设计各个微服务的数据库。

在DDD之前，我们接到需求之后就开始开发，设计表结构，写业务逻辑，用户怎么提需求，软件就怎么开发。

DDD之后，要求我们更加主动地去理解业务，掌握业务领域知识。


命令与查询职责分离(CQRS)模式
	将系统按照职责划分为：命令(即增删改操作)与查询两个部分。

	所有命令部分的增删改操作应当采用领域驱动设计的思想进行软件设计。
	所有的查询功能应当采用事务脚本模式，即直接通过SQL语句进行查询。



DDD 分层结构
	用户接口层：
		对外提供Restful接口，根据不同的前端应用定制不同的数据适配器。包含model、assembler装饰器、controller。

		流程如下：1、接收HTTP请求，并从请求中提前数据。2、将数据转换DTO。3、调用应用层提供的服务来执行具体的业务操作。4、获取应用层返回的结果，将结果转换用户需要的格式。

	应用层：
		负责协调领域层的多个聚合完成服务的组合和编排，不包含核心业务逻辑。

		流程如下：根据业务规则(顺序，如先检查一个条件是否满足，再执行一个业务操作)，协调领域层来处理具体的业务处理。

	领域层：负责实现核心业务逻辑，包含实体、值对象、聚合、领域服务等。
	基础设施层：负责通用的基础服务，如数据库、缓存、消息中间等






两顶帽子思维
	当我们要新增或修改代码时，并不是直接改原有的方法逻辑。而是要遵循两顶帽子，第一顶帽子是"重构"，在不添加新功能的前提下，重构代码调整程序结构以适应新功能。第二顶帽子是"添加新功能"，在重构的代码基础上，实现新的业务需求。


	两顶帽子的核心思想是鼓励先重构代码(并不是持续修改同一方法，因为这样会导致代码臃肿、难以维护、增加了出错的可能性)，使其适应新的需求再添加功能，保持代码质量的文档。





防腐层
	是一种架构模式，保护当前系统的领域模型不被外部系统的模型"腐蚀"。在本地建立一个适配层，将外部系统的模型和协议转换为本地系统的领域模型和协议，从而使本地系统不受外部系统变化影响。


	为什么要防腐层
		如果直接使用外部系统的模型会导致以下几个问题：1、维护困难，当外部系统发生变化时，需要在本地系统的多个地方进行修改，增加了维护成本和出错的风险。2、强耦合，本地系统对外部系统的实现细节有了依赖，外部系统的变化会直接影响本地系统，降低了本地系统的稳定性。


	防腐层的作用
		隔离外部变化：将外部系统的模型和协议与本地系统隔离，外部系统的变化不会直接影响本地系统。
		降低耦合度：本地系统只与防腐层交互，而不直接依赖外部系统的实现细节，增强了系统的稳定性和可维护性。








整洁架构
	在传统的开发中，业务代码往往与底层技术框架强耦合。比如使用了Hibernate，当需要替换成Mybatis的时候需要对业务代码进行大量修改。所以我们在设计的时候就一个将业务代码和底层框架解耦。	整洁架构的核心实现就是：通过分层解耦业务逻辑和技术细节，使得系统更加灵活、可维护和可测试，从而降低了更换技术框架的成本。


	实体层：领域模型和业务逻辑。
	用例层：负责处理用户请求，协调各个领域对象之间的交互，从而实现应用程序的业务逻辑。
	接口适配层：负责将外部接口(如UI、数据库、网络请求等)转换为用例层能够处理的格式。
	框架和驱动层：包含具体的技术实现，如Web框架、数据库驱动、外部API等。


DDD和整洁架构的关系
	整洁架构提供了关于如何组织代码、管理依赖和实现解耦的指导，在DDD的战术设计时，可以参考整洁架构的分层和依赖管理原则，来实现高质量。可维护、可扩展的系统。如分层结构：将领域层、应用层、基础设施层等进行清晰的划分。依赖倒置：使得领域层不依赖于基础设施层，实现领域模型的纯净性。














